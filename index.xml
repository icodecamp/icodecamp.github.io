<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iCodeCamp</title>
    <link>https://icodecamp.github.io/index.xml</link>
    <description>Recent content on iCodeCamp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2017 iCodeCamp</copyright>
    <atom:link href="https://icodecamp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Working with Git</title>
      <link>https://icodecamp.github.io/lessons/1-git-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/1-git-terminal/</guid>
      <description>

&lt;h2 id=&#34;what-is-github&#34;&gt;What is GitHub?&lt;/h2&gt;

&lt;h2 id=&#34;how-to-install-github&#34;&gt;How to Install GitHub&lt;/h2&gt;

&lt;h2 id=&#34;must-know-commands&#34;&gt;Must Know Commands&lt;/h2&gt;

&lt;h2 id=&#34;project&#34;&gt;Project&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Variables and Functions</title>
      <link>https://icodecamp.github.io/lessons/2-variables-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/2-variables-functions/</guid>
      <description>

&lt;h2 id=&#34;what-is-a-programming-language&#34;&gt;What is a programming language?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Humans use languages (English, Urdu, Arabic) to communicate with each other. A program is a set of instructions that tells &amp;gt; a computer what to do. Programs are written using a programming language. A programming language, then, is used by
humans to communicate with computers.&lt;/p&gt;

&lt;p&gt;There is still a language barrier between computers and humans. Computers understand machine language. Machine language
is often times platform specific. Code generated on one machine may not run on another machine. Machine language
looks like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;| Instruction Binary Code  | 
| 0010 0001 0000 0100  | 
| 0001 0001 0000 0101  | 
| 0011 0001 0000 0110  |
| 0111 0000 0000 0001  | 
| 0000 0000 0101 0011  | 
| 0000 0000 0101 0011  |
| 0000 0000 0000 0000  |
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This notation is very difficult for humans to understand. This is where assembly languages come in. Assembly
language consists of a set of symbols and letters which a translator uses to translate to machine
language. This translator is called the &amp;lsquo;assembler.&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;ORG 100 
LDA A
ADD B
STA C
HLT
A, DEC 83
B, DEC –2
C, DEC 0
END
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We can sort of see what this program is doing. However, this form of communication is still not intuitive for humans. Some
progress must be made.&lt;/p&gt;

&lt;p&gt;A high level programming language uses English logic (if, while, for, then, else) and mathematical symbols (+, -, %, |, &amp;amp;)
to communicate with a computer. These programs are compiled into machine code by a compiler. Compilation does not
imply execution of the code. It just referes to the conversion from a high level programming language to machine code.
The advantage here is that these high level programming languages are portable. I can code on my laptop and run it on
my desktop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;int a, b, c;
a = 83;
b = -2;
c = a + b;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Credit: &lt;a href=&#34;http://people.uncw.edu/tompkinsj/242/BasicComputer/AddTwoNumbers.htm&#34;&gt;http://people.uncw.edu/tompkinsj/242/BasicComputer/AddTwoNumbers.htm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables are used to store information. A variable can hold many different types of information:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;String: &amp;quot;abc&amp;quot;, &amp;quot;hello&amp;quot;, &amp;quot;YAM&amp;quot;
Integer: 2, -5, 6, 100000
Float: 2.0, 5.66, -9.89
Boolean: true, false
Char: &#39;y&#39;, &#39;A&#39;, &#39;m&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-create-variables&#34;&gt;How to create variables?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables are easy with Python:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;first_name = &amp;quot;Khurram&amp;quot;
last_name = &amp;quot;Ghullamani&amp;quot;
age = 22
height = 65
married = false
spouse = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-can-you-do-with-them&#34;&gt;What can you do with them?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;//update the varibale completely
first_name = &amp;quot;Chandler&amp;quot;
last_name = &amp;quot;Bing&amp;quot;
married = true
spouse = &amp;quot;Monica&amp;quot;

// perform mathematical operations
age = age + 30
height -= 2

// random stuff
my_number = age + height

// string concatenation -- Chandler Bing
full_name = first_name + &amp;quot; &amp;quot; + last_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-can-t-you-do-with-them&#34;&gt;What can&amp;rsquo;t you do with them?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// type checking
age + name ---&amp;gt;&amp;gt; ERROR
married+age ----&amp;gt;&amp;gt; ERROR
first_name-last_name ----&amp;gt;&amp;gt; ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A function is a piece of code that can be used to execute multiple code statements over and over again. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;def my_first_function(age):
	age = age + 10
	return age
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Here, def is keyword reserved in Python. It is used to declare a function.
The name of the function is &amp;ldquo;my_first_function&amp;rdquo;. It takes a parameter known as age. A parameter is simply
information that the user can pass into the function. The two lines after are known as the function body.
This function takes the age, adds 10 and returns (gives the user back) the new value. After your return, your
program is over. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;my_age = 22
new_age = my_first_function(my_age)

// new_age now equals 22 + 10 = 32
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variable-scope-in-functions&#34;&gt;Variable Scope in functions&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A variable can be global or local. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;def my_height_function(user_height):
	my_height = 65
	new_height = my_height + user_height
	return new_height

my_height = my_height + 10 ------&amp;gt;&amp;gt; ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example above, my_height is a local variable. It was defined in the scope of the function. It cannot be used
outside the function. We could switch our definition to look like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;my_height = 65
def my_height_function(user_height):
	new_height = my_height + user_height
	return new_height

my_height = my_height + 10 ------&amp;gt;&amp;gt; This is correct
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Since my_height is defined outside the function, it can be used inside the function as well as outside the function. This
is an example of a global variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;let-s-run-your-first-program-what-do-you-think-this-does&#34;&gt;Let&amp;rsquo;s run your first program. What do you think this does?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import webbrowser
url = &amp;quot;https://www.google.com/#q=&amp;quot;
def search_for():
	query = raw_input(&amp;quot;What would you like to search for?&amp;quot;)
	my_url = url + query
	webbrowser.open(my_url)

search_for()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lets-make-your-first-push-to-github&#34;&gt;Lets make your first push to github&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Complete the problems in the file assignment.py. Then run the tests in the file test_assignment.py using the command:
python test_assignmet.py. See how many you can get correct&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://icodecamp.github.io/lessons/3-data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/3-data-structures/</guid>
      <description>

&lt;!-- 
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
 --&gt;

&lt;p&gt;need some sort of intro!  Unit testing&lt;/p&gt;

&lt;h1 id=&#34;what-are-data-structures&#34;&gt;What are Data Structures?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/data_structures.html&#34;&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;&lt;/a&gt;
are used to store and organize data. Throughout this course, we will be covering four data
structures that are built into python.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/strings.html&#34;&gt;strings&lt;/a&gt; are
&lt;em&gt;immutable&lt;/em&gt; ordered sequences of characters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stringy= &amp;quot;giordanos is better than lou malnatis!&amp;quot;
len(stringy)
stringy[12] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/lists.html&#34;&gt;lists&lt;/a&gt; are  &lt;em&gt;mutable&lt;/em&gt;
ordered sequences of any type of object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listy = [1.0, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;bee&amp;quot;, &amp;quot;see&amp;quot;, true]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/tuples.html&#34;&gt;tuples&lt;/a&gt; are
&lt;em&gt;immutable&lt;/em&gt; ordered sequences of any type of object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tupley = (1.0, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;bee&amp;quot;, &amp;quot;see&amp;quot;, true)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/dicts.html&#34;&gt;dictionaries&lt;/a&gt; map a key
object to a value object. The objects don&amp;rsquo;t necessarily have to be the same. The pairs
are not organized and we can&amp;rsquo;t have duplicate keys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dicty = { &amp;quot;a&amp;quot; : &amp;quot;apple&amp;quot;, &amp;quot;b&amp;quot; : &amp;quot;banana&amp;quot;, &amp;quot;h&amp;quot; : &amp;quot;Harambe&amp;quot; }
dicty2 = { 1 : &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot; : 2, False : True }
dicty[&amp;quot;a&amp;quot;]
del dicty[&amp;quot;b&amp;quot;]
dicty.update(dicty2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Activity Use indexes (especially zero index) Use keys to update your score&lt;/p&gt;

&lt;h1 id=&#34;what-are-loops&#34;&gt;What are Loops?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Definition&lt;/p&gt;

&lt;h5 id=&#34;for-loop-while-loop-range-break-continue-activity-find-sum&#34;&gt;For Loop ##### While Loop ##### Range ##### Break ##### continue Activity: Find sum&lt;/h5&gt;

&lt;p&gt;and average of a set of numbers in an array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;what-is-flow-control&#34;&gt;What is Flow Control?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Definition&lt;/p&gt;

&lt;h5 id=&#34;if-else-if-else&#34;&gt;If ##### Else if ##### Else&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;Activity: Finding largest and smallest number in an unsorted array&lt;/p&gt;

&lt;h1 id=&#34;activity-activity-while-true-user-types-in-a-string-then-you-add-the-string-to-an&#34;&gt;Activity Activity While (true): User types in a string, then you add the string to an&lt;/h1&gt;

&lt;p&gt;array, and then you speak outloud all strings in array as a sentence If user types in
“exit” quit program Function that takes in a string and actually reads it out loud
Introduce assignment and clear up confusion About pixels (RBG) Double for loops&lt;/p&gt;

&lt;h1 id=&#34;project-mini-project-to-push-to-github-photo-manipulation-select-an-image-the-program&#34;&gt;Project Mini-project to push to Github Photo manipulation Select an image, the program&lt;/h1&gt;

&lt;p&gt;will loop through all pixels and edit the blue value by 10% or something and make the
image more blue Optional part 2: rotate the image or something TODO: For pixels in x For
pixels in y pixel(x,y)[2] = pixel(x,y)[2] * 1.5&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Frequent Questions</title>
      <link>https://icodecamp.github.io/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/faq/</guid>
      <description>

&lt;h2 id=&#34;what-are-the-dates-for-code-camp&#34;&gt;What are the dates for Code Camp?&lt;/h2&gt;

&lt;p&gt;Camp dates are May 25 to August 10, 2017. You should choose one date for each lesson:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lesson one: May 25 and/or June 1&lt;/li&gt;
&lt;li&gt;Lesson two: June 8 and/or June 15&lt;/li&gt;
&lt;li&gt;Lesson three: June 22 and/or June 29&lt;/li&gt;
&lt;li&gt;Lesson four: July 6 and/or July 13&lt;/li&gt;
&lt;li&gt;Lesson five: July 20 and/or July 27&lt;/li&gt;
&lt;li&gt;Lesson six: August 3 and/or August 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-are-there-two-classes-for-each-lesson&#34;&gt;Why are there two classes for each lesson?&lt;/h2&gt;

&lt;p&gt;Some of the feedback we got after our pilot Code Camp in 2016 was that it is difficult for students to complete the course in the summer because of travel plans and jamati activities. Providing two dates for each lesson allows students to plan their attendance at Camp around any travel plans they may already have. This also allows students to attend a lesson twice to review concepts or spend extra time with instructors for a particularly difficult lesson.&lt;/p&gt;

&lt;h2 id=&#34;where-are-classes-held&#34;&gt;Where are classes held?&lt;/h2&gt;

&lt;p&gt;Each class will be held in Chicago Ismaili Jamatkhana social hall.&lt;/p&gt;

&lt;h2 id=&#34;how-are-classes-structured&#34;&gt;How are classes structured?&lt;/h2&gt;

&lt;p&gt;Each class will cover an important programming or Python concept. You will be required to complete homework assignments and &amp;ldquo;push&amp;rdquo; code to Github &amp;ndash; this means your code will be sent to a public folder where your instructors for review.&lt;/p&gt;

&lt;h2 id=&#34;who-are-the-instructors&#34;&gt;Who are the instructors?&lt;/h2&gt;

&lt;p&gt;Your instructors this year are Khurram Ghulamani, Danish Noorani and Taufiq Dhanani.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://icodecamp.github.io/lessons/0-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/0-introduction/</guid>
      <description>

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;https://icodecamp.github.io/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;https://icodecamp.github.io/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;https://icodecamp.github.io/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>code camp 2017</title>
      <link>https://icodecamp.github.io/apply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/apply/</guid>
      <description>&lt;p&gt;Code Camp 2017 will be held weekly from &lt;strong&gt;May 25&lt;/strong&gt; to &lt;strong&gt;August 10&lt;/strong&gt;. The class is six weeks long; there will be a new lesson every two weeks. This gives you the opportunity to schedule classes amidst any travel plans you may have this summer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Requirement:&lt;/strong&gt; Space is limited and demand is high so, if you&amp;rsquo;re selected to join the class, you must commit to attending every lesson.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time commitment:&lt;/strong&gt; 3 hours per week&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt; Chicago Ismaili Jamatkhana Social Hall&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>