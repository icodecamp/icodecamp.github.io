<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lessons on iCodeCamp</title>
    <link>https://icodecamp.github.io/lessons/index.xml</link>
    <description>Recent content in Lessons on iCodeCamp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2017 iCodeCamp</copyright>
    <atom:link href="https://icodecamp.github.io/lessons/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started</title>
      <link>https://icodecamp.github.io/lessons/0-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/0-introduction/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-icodecamp&#34;&gt;Welcome to iCodeCamp&lt;/h1&gt;

&lt;p&gt;There are &lt;strong&gt;three&lt;/strong&gt; steps you must complete before your first before class. If you run into trouble, no worries we&amp;rsquo;ll work with you during class. Good Luck!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install Sublime Text&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://download.sublimetext.com/Sublime%20Text%202.0.2.dmg&#34;&gt;&lt;strong&gt;download link for Mac&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://download.sublimetext.com/Sublime%20Text%202.0.2a%20x64%20Setup.exe&#34;&gt;&lt;strong&gt;download link for Windows&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://download.sublimetext.com/Sublime%20Text%202.0.2a%20Setup.exe&#34;&gt;&lt;strong&gt;alternative download link for windows x86&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create Github Account&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/join?source=header-home&#34;&gt;&lt;strong&gt;create a free username and password&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;and make sure you remember your credentials :)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Installing Git&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mac users&lt;/strong&gt; open the application called &amp;ldquo;terminal&amp;rdquo; and type &lt;code&gt;git --version&lt;/code&gt; in the black box that appears.&lt;/p&gt;

&lt;p&gt;If you get a response similar to &lt;code&gt;git version #.##.# (Apple Git-78)&lt;/code&gt;, then you&amp;rsquo;re good. Otherwise, download git from &lt;a href=&#34;https://git-scm.com/download/mac&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;windows users&lt;/strong&gt; follow the instructions for windows &lt;a href=&#34;https://www.edureka.co/blog/install-git/&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Installation Working with Git</title>
      <link>https://icodecamp.github.io/lessons/1-git-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/1-git-terminal/</guid>
      <description>

&lt;h2 id=&#34;class-activities&#34;&gt;Class activities&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Video: &lt;a href=&#34;https://www.youtube.com/watch?v=dU1xS07N-FA&#34;&gt;https://www.youtube.com/watch?v=dU1xS07N-FA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Staff Introductions&lt;/li&gt;
&lt;li&gt;Syllabus&lt;/li&gt;
&lt;li&gt;Going through installation troubles&lt;/li&gt;
&lt;li&gt;Terminal Commands&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;terminal-git-bash&#34;&gt;Terminal/Git Bash&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What is the terminal/ Git Bash?
A common person interacts with the computer&amp;rsquo;s operating visually. Meaning if a person wants to open a program, he/she will click on it. If they want to create a file, they will right click and select new file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A terminal/ git bash allows the user to interact with the operating system by simpling typing commands. Instead of right clicking, a person would simply type a command to create a new file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Why should I learn to use it?
After using the terminal for awhile, you will see that it makes the common tasks of programming a lot faster and efficient. It also the most common method most professional programmers interact with the operating system. So even if you don&amp;rsquo;t experience the benefits, atleast you are gaining exposure to how things are done in the industry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What are some common commands?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;ls- Shows all files/directories in the current directory&lt;/li&gt;
&lt;li&gt;cd directoryname- Changes the path to the specified directory&lt;/li&gt;
&lt;li&gt;touch filename- Creates a file with the specified name in the current directory&lt;/li&gt;
&lt;li&gt;mkdir- Creates a file with the specified name in the current directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Why is GitHub needed?
Imagine you and your friend are writing code to create a game. Once you project gets big enought they are two problems you will most likely run into.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Problem 1: You have made some changes to the code and now you want your friend to also have these changes. One way you can share the code is by emailing the code to your friend or putting it on a flash drive. This can&amp;rsquo;t get very annoying very fast if the project involves making a lot of changes. With two people, emailing might end up working, but imagine working in a team of 10. It would be almost impossible to share code with 10 people.&lt;/p&gt;

&lt;p&gt;Problem 2: You wrote a lot of code to change some aspect of the game. You save the code and play the game, but realize that you liked the other version of the game better. You code try to undo your way back to the orginal code. That might work, but you might forget where you wanted to go back to. Worse, you might of closed your text editor so you can&amp;rsquo;t even undo, you have to remember every place you made a change and then delete/fix it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is Git?
Git is aimed at solving the two problems described above. Git allows you to save versions of your program using a commit. Everytime you commit your code, git assigns that commit a number and saves the whole snapshot of your project. You can then revert back to the pervious commit if you mess up.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is Github?
Github is service that allows you to save your program in the cloud so you can share with your friends, teammates, or anyone else in the world. By the &amp;ldquo;cloud&amp;rdquo;, I mean Github owns a bunch of computers where you can store your code. So once you have made your changes you push your changes to the computers owned by github. Then ask github for the most updated version of the code and download onto his/her computer before he/she makes any changes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So how do I use git/github?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First thing you need to do is sign up for an account on github and download git (inctructions are above).&lt;/p&gt;

&lt;p&gt;Next you need to gain a little familiarity with terminal/git bash commands.&lt;/p&gt;

&lt;p&gt;Now your ready to learn the github workflow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is the github workflow?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First thing you need to do is create your project folder where you will store all your files. To do this you can create a folder using mkdir projectname or by going to github and creating a new repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You need to tell git that want it to start tracking changes in this folder. To this you use the command git init. Now you created a git repository meaning git will start saving versions of this folder once you commit your code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you need start doing stuff meaning working on your project. You will probably need to create a file. You can do so using the command: touch filename. Now that you have created your file, you should probably open it using a file editor and adding stuff to it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you are done making changes. You need to add these files to be part of this new commit you will be making. To do so you use the commad git add filename or git add . to add every file you made a change to.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you are ready to make a commit. You can do so by typing git commit -m &amp;ldquo;some message&amp;rdquo;. Note you cannot commit without making a message.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After you have made your commit you might want to share your code with some else. To do so, you need to create a repository in github where you can send your code. So you need to go your account in github and create a new repositoy.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After you have created a repository in github you want to tell your local repository that you want to send the code to a certain github repository. You can do so by using the command: Git add origin “https:…”. You can get the http address on the page of your repository on github.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you can simply use the command: git push to send your changes to the cloud.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your friend can simply get the changes by using the command: git pull.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;main-activity&#34;&gt;Main Activity&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Cloning a repo&lt;/li&gt;
&lt;li&gt;Creating a new repo with a personalized site using git init and pushing it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;homework&#34;&gt;Homework&lt;/h2&gt;

&lt;p&gt;Posted on &lt;a href=&#34;https://github.com/icodecamp/module1_personalWebsite&#34;&gt;https://github.com/icodecamp/module1_personalWebsite&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Variables and Functions</title>
      <link>https://icodecamp.github.io/lessons/2-variables-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/2-variables-functions/</guid>
      <description>

&lt;h2 id=&#34;what-is-a-programming-language&#34;&gt;What is a programming language?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Humans use languages (English, Urdu, Arabic) to communicate with each other. A program
is a set of instructions that tells a computer what to do. Programs are written using
a programming language. A programming language, then, is used by humans to communicate
with computers.&lt;/p&gt;

&lt;p&gt;There is still a language barrier between computers and humans. Computers understand machine language. Machine language
is often times platform specific. Code generated on one machine may not run on another machine. Machine language
looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| Instruction Binary Code  | 
| 0010 0001 0000 0100  | 
| 0001 0001 0000 0101  | 
| 0011 0001 0000 0110  |
| 0111 0000 0000 0001  | 
| 0000 0000 0101 0011  | 
| 0000 0000 0101 0011  |
| 0000 0000 0000 0000  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This notation is very difficult for humans to understand. This is where assembly languages come in. Assembly
language consists of a set of symbols and letters which a translator uses to translate to machine
language. This translator is called the &amp;lsquo;assembler.&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;ORG 100 
LDA A
ADD B
STA C
HLT
A, DEC 83
B, DEC –2
C, DEC 0
END
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We can sort of see what this program is doing. However, this form of communication is still not intuitive for humans. Some
progress must be made.&lt;/p&gt;

&lt;p&gt;A high level programming language uses English logic (if, while, for, then, else) and mathematical symbols (+, -, %, |, &amp;amp;)
to communicate with a computer. These programs are compiled into machine code by a compiler. Compilation does not
imply execution of the code. It just referes to the conversion from a high level programming language to machine code.
The advantage here is that these high level programming languages are portable. I can code on my laptop and run it on
my desktop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;int a, b, c;
a = 83;
b = -2;
c = a + b;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Credit: &lt;a href=&#34;http://people.uncw.edu/tompkinsj/242/BasicComputer/AddTwoNumbers.htm&#34;&gt;http://people.uncw.edu/tompkinsj/242/BasicComputer/AddTwoNumbers.htm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables are used to store information. A variable can hold many different types of information:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;String: &amp;quot;abc&amp;quot;, &amp;quot;hello&amp;quot;, &amp;quot;YAM&amp;quot;
Integer: 2, -5, 6, 100000
Float: 2.0, 5.66, -9.89
Boolean: true, false
Char: &#39;y&#39;, &#39;A&#39;, &#39;m&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-create-variables&#34;&gt;How to create variables?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables are easy with Python:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;first_name = &amp;quot;Khurram&amp;quot;
last_name = &amp;quot;Ghullamani&amp;quot;
age = 22
height = 65
married = false
spouse = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-can-you-do-with-them&#34;&gt;What can you do with them?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;//update the varibale completely
first_name = &amp;quot;Chandler&amp;quot;
last_name = &amp;quot;Bing&amp;quot;
married = true
spouse = &amp;quot;Monica&amp;quot;

// perform mathematical operations
age = age + 30
height -= 2

// random stuff
my_number = age + height

// string concatenation -- Chandler Bing
full_name = first_name + &amp;quot; &amp;quot; + last_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-can-t-you-do-with-them&#34;&gt;What can&amp;rsquo;t you do with them?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// type checking
age + name ---&amp;gt;&amp;gt; ERROR
married+age ----&amp;gt;&amp;gt; ERROR
first_name-last_name ----&amp;gt;&amp;gt; ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A function is a piece of code that can be used to execute multiple code statements over and over again. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;def my_first_function(age):
	age = age + 10
	return age
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Here, def is keyword reserved in Python. It is used to declare a function.
The name of the function is &amp;ldquo;my_first_function&amp;rdquo;. It takes a parameter known as age. A parameter is simply
information that the user can pass into the function. The two lines after are known as the function body.
This function takes the age, adds 10 and returns (gives the user back) the new value. After your return, your
program is over. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;my_age = 22
new_age = my_first_function(my_age)

// new_age now equals 22 + 10 = 32
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variable-scope-in-functions&#34;&gt;Variable Scope in functions&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A variable can be global or local. Example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;def my_height_function(user_height):
	my_height = 65
	new_height = my_height + user_height
	return new_height

my_height = my_height + 10 ------&amp;gt;&amp;gt; ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example above, my_height is a local variable. It was defined in the scope of the function. It cannot be used
outside the function. We could switch our definition to look like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;my_height = 65
def my_height_function(user_height):
	new_height = my_height + user_height
	return new_height

my_height = my_height + 10 ------&amp;gt;&amp;gt; This is correct
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Since my_height is defined outside the function, it can be used inside the function as well as outside the function. This
is an example of a global variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;let-s-run-your-first-program-what-do-you-think-this-does&#34;&gt;Let&amp;rsquo;s run your first program. What do you think this does?&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import webbrowser
url = &amp;quot;https://www.google.com/#q=&amp;quot;
def search_for():
	query = raw_input(&amp;quot;What would you like to search for?&amp;quot;)
	my_url = url + query
	webbrowser.open(my_url)

search_for()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lets-make-your-first-push-to-github&#34;&gt;Lets make your first push to github&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Complete the problems in the file assignment.py. Then run the tests in the file test_assignment.py using the command:
python test_assignmet.py. See how many you can get correct&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://icodecamp.github.io/lessons/3-data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/3-data-structures/</guid>
      <description>

&lt;!-- 
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
 --&gt;

&lt;p&gt;need some sort of intro!  Unit testing&lt;/p&gt;

&lt;h1 id=&#34;what-are-data-structures&#34;&gt;What are Data Structures?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/data_structures.html&#34;&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;&lt;/a&gt;
are used to store and organize data. Throughout this course, we will be covering four data
structures that are built into python.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/strings.html&#34;&gt;strings&lt;/a&gt; are
&lt;em&gt;immutable&lt;/em&gt; ordered sequences of characters&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stringy= &amp;quot;giordanos is better than lou malnatis!&amp;quot;
len(stringy)
stringy[12] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/lists.html&#34;&gt;lists&lt;/a&gt; are  &lt;em&gt;mutable&lt;/em&gt;
ordered sequences of any type of object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listy = [1.0, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;bee&amp;quot;, &amp;quot;see&amp;quot;, true]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/tuples.html&#34;&gt;tuples&lt;/a&gt; are
&lt;em&gt;immutable&lt;/em&gt; ordered sequences of any type of object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tupley = (1.0, 2, 3, &amp;quot;a&amp;quot;, &amp;quot;bee&amp;quot;, &amp;quot;see&amp;quot;, true)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thomas-cokelaer.info/tutorials/python/dicts.html&#34;&gt;dictionaries&lt;/a&gt; map a key
object to a value object. The objects don&amp;rsquo;t necessarily have to be the same. The pairs
are not organized and we can&amp;rsquo;t have duplicate keys&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dicty = { &amp;quot;a&amp;quot; : &amp;quot;apple&amp;quot;, &amp;quot;b&amp;quot; : &amp;quot;banana&amp;quot;, &amp;quot;h&amp;quot; : &amp;quot;Harambe&amp;quot; }
dicty2 = { 1 : &amp;quot;one&amp;quot;, &amp;quot;two&amp;quot; : 2, False : True }
dicty[&amp;quot;a&amp;quot;]
del dicty[&amp;quot;b&amp;quot;]
dicty.update(dicty2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Activity Use indexes (especially zero index) Use keys to update your score&lt;/p&gt;

&lt;h1 id=&#34;what-are-loops&#34;&gt;What are Loops?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Definition&lt;/p&gt;

&lt;h5 id=&#34;for-loop&#34;&gt;For Loop&lt;/h5&gt;

&lt;h5 id=&#34;while-loop&#34;&gt;While Loop&lt;/h5&gt;

&lt;h5 id=&#34;range&#34;&gt;Range&lt;/h5&gt;

&lt;h5 id=&#34;break&#34;&gt;Break&lt;/h5&gt;

&lt;h5 id=&#34;continue-activity-find-sum&#34;&gt;continue Activity: Find sum&lt;/h5&gt;

&lt;p&gt;and average of a set of numbers in an array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;what-is-flow-control&#34;&gt;What is Flow Control?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Definition&lt;/p&gt;

&lt;h5 id=&#34;if&#34;&gt;If&lt;/h5&gt;

&lt;h5 id=&#34;else-if&#34;&gt;Else if&lt;/h5&gt;

&lt;h5 id=&#34;else&#34;&gt;Else&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;Activity: Finding largest and smallest number in an unsorted array&lt;/p&gt;

&lt;h1 id=&#34;activity-activity-while-true-user-types-in-a-string-then-you-add-the-string-to-an&#34;&gt;Activity Activity While (true): User types in a string, then you add the string to an&lt;/h1&gt;

&lt;p&gt;array, and then you speak outloud all strings in array as a sentence If user types in
“exit” quit program Function that takes in a string and actually reads it out loud
Introduce assignment and clear up confusion About pixels (RBG) Double for loops&lt;/p&gt;

&lt;h1 id=&#34;project-mini-project-to-push-to-github-photo-manipulation-select-an-image-the-program&#34;&gt;Project Mini-project to push to Github Photo manipulation Select an image, the program&lt;/h1&gt;

&lt;p&gt;will loop through all pixels and edit the blue value by 10% or something and make the
image more blue Optional part 2: rotate the image or something TODO: For pixels in x For
pixels in y pixel(x,y)[2] = pixel(x,y)[2] * 1.5&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>