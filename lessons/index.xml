<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lessons on iCodeCamp</title>
    <link>https://icodecamp.github.io/lessons/index.xml</link>
    <description>Recent content in Lessons on iCodeCamp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2017 iCodeCamp</copyright>
    <atom:link href="https://icodecamp.github.io/lessons/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started</title>
      <link>https://icodecamp.github.io/lessons/0-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/0-introduction/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-icodecamp&#34;&gt;Welcome to iCodeCamp&lt;/h1&gt;

&lt;p&gt;There are &lt;strong&gt;three&lt;/strong&gt; steps you must complete before your first before class. If you run into trouble, no worries we&amp;rsquo;ll work with you during class. Good Luck!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install Sublime Text&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://download.sublimetext.com/Sublime%20Text%202.0.2.dmg&#34;&gt;&lt;strong&gt;download link for Mac&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://download.sublimetext.com/Sublime%20Text%202.0.2a%20x64%20Setup.exe&#34;&gt;&lt;strong&gt;download link for Windows&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://download.sublimetext.com/Sublime%20Text%202.0.2a%20Setup.exe&#34;&gt;&lt;strong&gt;alternative download link for windows x86&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create Github Account&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/join?source=header-home&#34;&gt;&lt;strong&gt;create a free username and password&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;and make sure you remember your credentials :)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Installing Git&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mac users&lt;/strong&gt; open the application called &amp;ldquo;terminal&amp;rdquo; and type &lt;code&gt;git --version&lt;/code&gt; in the black box that appears.&lt;/p&gt;

&lt;p&gt;If you get a response similar to &lt;code&gt;git version #.##.# (Apple Git-78)&lt;/code&gt;, then you&amp;rsquo;re good. Otherwise, download git from &lt;a href=&#34;https://git-scm.com/download/mac&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;windows users&lt;/strong&gt; follow the instructions for windows &lt;a href=&#34;https://www.edureka.co/blog/install-git/&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Terminal and Git</title>
      <link>https://icodecamp.github.io/lessons/1-git-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/1-git-terminal/</guid>
      <description>


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nKIu9yen5nc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;h1 id=&#34;what-is-terminal&#34;&gt;What is Terminal?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://askubuntu.com/questions/38162/what-is-a-terminal-and-how-do-i-open-and-use-it&#34;&gt;&lt;strong&gt;Terminal&lt;/strong&gt;&lt;/a&gt;
allows the user to interact with the operating system by simpling typing commands. Below are the most popular commands that you should know.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tutorialspoint.com/unix_commands/ls.htm&#34;&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/a&gt; shows all files/directories in the current directory&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tutorialspoint.com/unix_commands/cd.htm&#34;&gt;&lt;code&gt;cd (directory_name)&lt;/code&gt;&lt;/a&gt; changes the path to the specified directory&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.linfo.org/touch.html&#34;&gt;&lt;code&gt;touch (file_name)&lt;/code&gt;&lt;/a&gt; creates a file with the specified name&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tutorialspoint.com/unix_commands/mkdir.htm&#34;&gt;&lt;code&gt;mkdir (directory_name)&lt;/code&gt;&lt;/a&gt; creates a directory (folder) with the specified name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;what-is-git&#34;&gt;What is Git?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/what-is-git&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; is a program that allows you to save versions of your program using a commit. Commiting saves the whole snapshot of your project. So you can then revert back to the pervious commit if you mess up. Everytime someone on your team pushes code to git, you can pull their changes and keep updated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/about&#34;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt; is service that we&amp;rsquo;ll use. It allows you to save your program in the &lt;a href=&#34;http://www.pcmag.com/article2/0,2817,2372163,00.asp&#34;&gt;cloud&lt;/a&gt; so you can share with your friends, teammates, or anyone else in the world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;activity&#34;&gt;Activity&lt;/h1&gt;

&lt;p&gt;This activity will test your terminal and git skills by having you download a project from a &lt;a href=&#34;https://www.sbf5.com/~cduan/technical/git/git-1.shtml&#34;&gt;github repository&lt;/a&gt; and then push the code to your own repository. Ensure that you have completed all the steps in the &lt;a href=&#34;http://localhost:1313/lessons/0-introduction/&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up terminal. Using the &lt;code&gt;cd Desktop&lt;/code&gt; command, navigate to your desktop&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;mkdir iCodeCamp&lt;/code&gt; command, create a new folder&lt;/li&gt;
&lt;li&gt;Change your directory to this new &amp;ldquo;iCodeCamp&amp;rdquo; directory&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;git clone https://github.com/icodecamp/module1_personalWebsite.git&lt;/code&gt; command to download the module1 code. Change your directory to the new folder that was downloaded.&lt;/li&gt;
&lt;li&gt;On an internet browser, go to github and create a new public repository with the name &amp;ldquo;USERNAME.github.io&amp;rdquo; (replace the word username with your actual username). You do not neet to initalize with a &amp;ldquo;README.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Back to terminal! Use the command &lt;code&gt;git init&lt;/code&gt; to create a git repository.&lt;/li&gt;
&lt;li&gt;The command &lt;code&gt;git add *&lt;/code&gt; will add all the files in the current directory to this new repo you just initialized locally.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;first commit&amp;quot;&lt;/code&gt; will commit this add to this new local repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote set-url origin (URL_OF_YOUR_REMOTE_REPO)&lt;/code&gt; will connect your local repository to the remote one you created on github.com.&lt;/li&gt;
&lt;li&gt;Final step! Run &lt;code&gt;git push -u origin master&lt;/code&gt; to push your local commit to your remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h1&gt;

&lt;p&gt;Github lets each user have a free site. You created version one of your own site. Using sublime text, edit the contents of this website to your hearts desire. Then use the following commands &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt; commands to push these changes to github! If you &amp;lsquo;git&amp;rsquo; stuck, here&amp;rsquo;s a &lt;a href=&#34;https://git-scm.com/docs/gittutorial&#34;&gt;link&lt;/a&gt; for a good resource.&lt;/p&gt;

&lt;h1 id=&#34;become-an-expert&#34;&gt;Become an Expert&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecademy.com/learn/learn-the-command-line&#34;&gt;&lt;strong&gt;Interactive Command Line Tutorial&lt;/strong&gt;&lt;/a&gt;. Stuck? &lt;a href=&#34;https://www.youtube.com/watch?v=iDbwYI4qntw&#34;&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.codecademy.com/learn/learn-git&#34;&gt;&lt;strong&gt;Interactive Github Tutorial&lt;/strong&gt;&lt;/a&gt;. Stuck? &lt;a href=&#34;https://www.youtube.com/watch?v=TlsLj0jE8e0&#34;&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.codecademy.com/learn/learn-html-css&#34;&gt;&lt;strong&gt;Interactive HTML and CSS Tutorial&lt;/strong&gt;&lt;/a&gt;. Stuck? &lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEKkZrJ3NV8EdSA2vcdiU5udHVVbBve0&#34;&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dash.generalassemb.ly/&#34;&gt;&lt;strong&gt;General Assembly&lt;/strong&gt;&lt;/a&gt; has numerous tutorial on creating reponsive websites and web games.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Variables and Functions</title>
      <link>https://icodecamp.github.io/lessons/2-variables-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/2-variables-functions/</guid>
      <description>

&lt;h1 id=&#34;what-is-a-programming-language&#34;&gt;What is a programming language?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Humans use languages (English, Urdu, Arabic) to communicate with each other. A program
is a set of instructions that tells a computer what to do. Programs are written using
a programming language. A programming language, then, is used by humans to communicate
with computers.&lt;/p&gt;

&lt;p&gt;There is still a language barrier between computers and humans. Computers understand machine language. Machine language
is often times platform specific. Code generated on one machine may not run on another machine. Machine language
looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| Instruction Binary Code  | 
| 0010 0001 0000 0100  | 
| 0001 0001 0000 0101  | 
| 0011 0001 0000 0110  |
| 0111 0000 0000 0001  | 
| 0000 0000 0101 0011  | 
| 0000 0000 0101 0011  |
| 0000 0000 0000 0000  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This notation is very difficult for humans to understand. This is where assembly languages come in.Â Assembly
languageÂ consists of a set of symbols and letters which a translator uses to translate to machine
language. This translator is called the &amp;lsquo;assembler.&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ORG 100Â 
LDA A
ADD B
STA C
HLT
A, DEC 83
B, DEC â2
C, DEC 0
END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can sort of see what this program is doing. However, this form of communication is still not intuitive for humans. Some
progress must be made.&lt;/p&gt;

&lt;p&gt;A high level programming language uses English logic (if, while, for, then, else) and mathematical symbols (+, -, %, |, &amp;amp;)
to communicate with a computer. These programs are compiled into machine code by a compiler. Compilation does not
imply execution of the code. It just referes to the conversion from a high level programming language to machine code.
The advantage here is that these high level programming languages are portable. I can code on my laptop and run it on
my desktop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int a, b, c;
a = 83;
b = -2;
c = a + b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Credit: &lt;a href=&#34;http://people.uncw.edu/tompkinsj/242/BasicComputer/AddTwoNumbers.htm&#34;&gt;http://people.uncw.edu/tompkinsj/242/BasicComputer/AddTwoNumbers.htm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;variables&#34;&gt;Variables&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables are used to store information. A variable can hold many different types of information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String: &amp;quot;abc&amp;quot;, &amp;quot;hello&amp;quot;, &amp;quot;YAM&amp;quot;
Integer: 2, -5, 6, 100000
Float: 2.0, 5.66, -9.89
Boolean: true, false
Char: &#39;y&#39;, &#39;A&#39;, &#39;m&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;how-to-create-variables&#34;&gt;How to create variables?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables are easy with Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;first_name = &amp;quot;Khurram&amp;quot;
last_name = &amp;quot;Ghullamani&amp;quot;
age = 22
height = 65
married = false
spouse = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;what-can-you-do-with-them&#34;&gt;What can you do with them?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;//update the varibale completely
first_name = &amp;quot;Chandler&amp;quot;
last_name = &amp;quot;Bing&amp;quot;
married = true
spouse = &amp;quot;Monica&amp;quot;

// perform mathematical operations
age = age + 30
height -= 2

// random stuff
my_number = age + height

// string concatenation -- Chandler Bing
full_name = first_name + &amp;quot; &amp;quot; + last_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;what-can-t-you-do-with-them&#34;&gt;What can&amp;rsquo;t you do with them?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;// type checking
age + name ---&amp;gt;&amp;gt; ERROR
married+age ----&amp;gt;&amp;gt; ERROR
first_name-last_name ----&amp;gt;&amp;gt; ERROR
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;functions&#34;&gt;Functions&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A function is a piece of code that can be used to execute multiple code statements over and over again. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def my_first_function(age):
	age = age + 10
	return age
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, def is keyword reserved in Python. It is used to declare a function.
The name of the function is &amp;ldquo;my_first_function&amp;rdquo;. It takes a parameter known as age. A parameter is simply
information that the user can pass into the function. The two lines after are known as the function body.
This function takes the age, adds 10 and returns (gives the user back) the new value. After your return, your
program is over. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_age = 22
new_age = my_first_function(my_age)

// new_age now equals 22 + 10 = 32
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;variable-scope-in-functions&#34;&gt;Variable Scope in functions&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A variable can be global or local. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def my_height_function(user_height):
	my_height = 65
	new_height = my_height + user_height
	return new_height

my_height = my_height + 10 ------&amp;gt;&amp;gt; ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, my_height is a local variable. It was defined in the scope of the function. It cannot be used
outside the function. We could switch our definition to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my_height = 65
def my_height_function(user_height):
	new_height = my_height + user_height
	return new_height

my_height = my_height + 10 ------&amp;gt;&amp;gt; This is correct
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since my_height is defined outside the function, it can be used inside the function as well as outside the function. This
is an example of a global variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;activity&#34;&gt;Activity&lt;/h1&gt;

&lt;h2 id=&#34;let-s-run-your-first-program-what-do-you-think-this-does&#34;&gt;Let&amp;rsquo;s run your first program. What do you think this does?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;import webbrowser
url = &amp;quot;https://www.google.com/#q=&amp;quot;
def search_for():
	query = raw_input(&amp;quot;What would you like to search for?&amp;quot;)
	my_url = url + query
	webbrowser.open(my_url)

search_for()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;clone-this-repositiory-https-github-com-icodecamp-module2-variables&#34;&gt;Clone &lt;a href=&#34;https://github.com/icodecamp/module2_variables&#34;&gt;this repositiory&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Complete the problems in the file assignment.py. Then run the tests in the file test_assignment.py using the command:
python test_assignmet.py. See how many you can get correct&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Conditional Statements</title>
      <link>https://icodecamp.github.io/lessons/3-conditional-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/3-conditional-statements/</guid>
      <description>

&lt;h1 id=&#34;what-are-the-three-conditional-statements&#34;&gt;What are the three conditional statements?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Open-source software (OSS) is computer software with its source code made available with a license in which the copyright holder provides the rights to study, change, and distribute the software to anyone and for any purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;iCodeCamp is a great example of the open source community. All of our source code and materials are accessible for free from practically anywhere to be used for practically any purpose. &lt;strong&gt;Github&lt;/strong&gt; is a platform that stores your code, but also lets other people access it and build off of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today we are going to fork this project:&lt;/strong&gt; &lt;a href=&#34;https://github.com/icodecamp/module3_snake&#34;&gt;https://github.com/icodecamp/module3_snake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project uses an external &lt;a href=&#34;https://askubuntu.com/questions/361741/what-are-dependencies&#34;&gt;&lt;strong&gt;dependency&lt;/strong&gt;&lt;/a&gt; called &lt;code&gt;pygame&lt;/code&gt;. Be sure to install pygame with python&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Package_manager&#34;&gt;&lt;strong&gt;package manager&lt;/strong&gt;&lt;/a&gt; by typing in &lt;code&gt;pip install pygame&lt;/code&gt; in either terminal or GitBash.&lt;/p&gt;

&lt;h1 id=&#34;what-is-flow-control&#34;&gt;What is Flow Control?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.openbookproject.net/books/bpp4awd/ch04.html&#34;&gt;&lt;strong&gt;Conditional statements&lt;/strong&gt;&lt;/a&gt; allow us to run some code only if a condition is met&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;if-statements&#34;&gt;if statements&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if {BOOLEAN EXPRESSION}:
    {STATEMENTS}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 5

if a == 5:
    print(&amp;quot;a is 5&amp;quot;)
    print(&amp;quot;this will totally print&amp;quot;)
    return
if a != 5:
    print(&amp;quot;a is not five&amp;quot;)
    print(&amp;quot;this will totally not print&amp;quot;)
    return
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;if-else-statements&#34;&gt;if else statements&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if {BOOLEAN EXPRESSION}:
    {STATEMENTS_1}        # executed if condition evaluates to True
else:
    {STATEMENTS_2}        # executed if condition evaluates to False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 5

if a == 5:
    print(&amp;quot;a is 5&amp;quot;)
    print(&amp;quot;this will totally print&amp;quot;)
    return
else:
    print(&amp;quot;a is not five&amp;quot;)
    print(&amp;quot;this will totally not print&amp;quot;)
    return
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;chained-conditionals&#34;&gt;chained conditionals&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if {BOOLEAN EXPRESSION1}:
    {STATEMENTS_A}
elif{BOOLEAN EXPRESSION2}:
  {STATEMENTS_B}
else:
    {STATEMENTS_C}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 5

if a == 1:
    print(&amp;quot;a is 1&amp;quot;)
elif a != 300:
    print(&amp;quot;a is not equal to 300&amp;quot;)
elif a &amp;gt; 5:
    print(&amp;quot;a is greater than 5&amp;quot;)
elif a &amp;lt; 5:
    print(&amp;quot;a is less than 5&amp;quot;)
else:
    print(&amp;quot;a is 5&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;project-snake&#34;&gt;Project Snake&lt;/h1&gt;

&lt;p&gt;This project is an open source game in which a hungry snake roams around a field in search of sparkling food. Your task is to implement the conditional statements required to make the snake move around.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you haven&amp;rsquo;t done so already, fork the &lt;a href=&#34;https://github.com/icodecamp/module3_snake&#34;&gt;&lt;strong&gt;project&lt;/strong&gt;&lt;/a&gt; and clone it to your desktop&lt;/li&gt;
&lt;li&gt;The project depends on an open source package called &amp;ldquo;pygame.&amp;rdquo; Use the command &lt;code&gt;pip install pygame&lt;/code&gt; in either GitBash or Terminal to install it.&lt;/li&gt;
&lt;li&gt;Open up the file &lt;code&gt;snake.py&lt;/code&gt; in sublime text.&lt;/li&gt;
&lt;li&gt;Notice that the first line of the file is &lt;code&gt;import pygame&lt;/code&gt; this allows us to use the pygame in our game&lt;/li&gt;
&lt;li&gt;Scroll to the bottom of the file. Fill in the missing segments using &lt;strong&gt;if&lt;/strong&gt;, &lt;strong&gt;elif&lt;/strong&gt;, and &lt;strong&gt;else&lt;/strong&gt; statements. The function should either return &lt;code&gt;move_up&lt;/code&gt;, &lt;code&gt;move_down&lt;/code&gt;, &lt;code&gt;move_left&lt;/code&gt;, or &lt;code&gt;move_right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the game by typing in &lt;code&gt;python game.py&lt;/code&gt; in the directory of the project on either GitBash or Terminal&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are having trouble with the code, you can find the solutions &lt;a href=&#34;https://github.com/icodecamp/module3_snake/blob/master/snake_solution.py&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lists and Loops</title>
      <link>https://icodecamp.github.io/lessons/4-data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/4-data-structures/</guid>
      <description>

&lt;h1 id=&#34;what-are-lists&#34;&gt;What are Lists?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Lists are the most versatile datatype available in Python which can be written as a list of comma-separated values (items) between square brackets. Important thing about a list is that items in a list need not be of the same type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;how-can-i-create-a-list&#34;&gt;How can I create a List?&lt;/h1&gt;

&lt;p&gt;Easy. Here is an example on creating an empty list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List with integers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List with integers, strings, booleans, floats, and list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, &amp;quot;hello&amp;quot;, True, 4.0, [1, 2, 3]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;how-do-i-access-elements-in-the-list&#34;&gt;How do I access elements in the List?&lt;/h1&gt;

&lt;p&gt;You can simply access in the elements in a list using bracket notation. The only tricky part is remembering that the first element in the list is at index 0, the second element is at index 1, and so on.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, &amp;quot;hello&amp;quot;, True, 4.0]

print(a[0]) -&amp;gt; prints 1
print(a[1]) -&amp;gt; prints &amp;quot;hello&amp;quot;
print(a[2]) -&amp;gt; prints True
print(a[3]) -&amp;gt; prints 4.0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is there an easier way of printing every element in a list?&lt;/p&gt;

&lt;p&gt;Yeah. You can use Loops.&lt;/p&gt;

&lt;h1 id=&#34;what-are-loops&#34;&gt;What are Loops?&lt;/h1&gt;

&lt;p&gt;There are two types of loops in Python, &lt;strong&gt;for&lt;/strong&gt; and &lt;strong&gt;while&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.python.org/moin/ForLoop&#34;&gt;&lt;strong&gt;For loops&lt;/strong&gt;&lt;/a&gt; are traditionally used when you have a block of code which you want to repeat a fixed number of times. The Python for statement iterates over the members of a sequence in order, executing the block each time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example of printing all numbers between one and a hundred:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for x in range(1, 101):
	print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example of printing all elements in a list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, &amp;quot;hello&amp;quot;, True, 4.0]

for element in a:
	print(element)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;activity-editing-images-with-loops&#34;&gt;Activity - Editing images with loops&lt;/h1&gt;

&lt;p&gt;An image is often represented as a list of lists. Where each element of the outer most list is a list that represents the first row of the image. The inner list contains tuples of rgb values: (r, g, b). The first element represents the red pixel value, the second represents green pixel value, and the third is the blue pixel value.&lt;/p&gt;

&lt;p&gt;This is an example of a 2x2 image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imageA = [[(0, 0, 0), (255, 255,255)], [(0, 0, 0), (255, 255,255)]]

image[0, 0] -&amp;gt; Represents the upper left corner of the image

image[0, 1] -&amp;gt; Represents the upper right corner of the image

image[1, 0] -&amp;gt; Represents the lower left corner of the image

image[1, 1] -&amp;gt; Represents the lower right corner of the image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Activity Steps&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pip install pillow&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git clone https://github.com/icodecamp/module4_imageProcessing.git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cd module4_imageProcessing&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace all ??? in the &lt;strong&gt;transfrom_image()&lt;/strong&gt; in &lt;strong&gt;transformImage.py&lt;/strong&gt; with the correct code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;python transformImage.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter path of the desired image (i.e &lt;code&gt;pikachu.png&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter path of the new image (i.e &lt;code&gt;gray_pikachu.png&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Look at your new image by &lt;code&gt;open gray_pikachu.png&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the code again to tranform your image into new colors.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Dictionaries and While Loops</title>
      <link>https://icodecamp.github.io/lessons/5-data-structures-dictionaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/5-data-structures-dictionaries/</guid>
      <description>

&lt;h1 id=&#34;what-are-dictionaries&#34;&gt;What are Dictionaries?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Dictionaries are another type of data structure. They are used to associate a unique id with its value. This association is referred to as a
key-value pair.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;a-weakness-of-lists&#34;&gt;A Weakness of Lists&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Recall that with lists, our indices had to be integers. You will soon see with dictionaries that our indices do not have to be integers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;how-can-i-create-a-dictionary&#34;&gt;How can I create a Dictionary?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Easy. Here is an example on creating an empty dictionary:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;a = {}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Do NOT confuse this syntax with the syntax for creating a list: a = []&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dictionary representing users at a bank:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ross = {&#39;Name&#39;: &#39;Ross&#39;, &#39;ID&#39;: 1234567890, &#39;Money&#39;: 4000.00}
Joey = {&#39;Name&#39;: &#39;Joey&#39;, &#39;ID&#39;: 0987654321, &#39;Money&#39;: 222.30}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The key is the string to the left of the colon. Its respective value is the element to the right of the colon. In the example above,
the key include: Name, ID &amp;amp; Money.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;how-do-i-access-elements-in-the-dictionary&#34;&gt;How do I access elements in the Dictionary?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Unlike lists, you can index dictionaries with strings. For example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Ross[&#39;Name&#39;] ==&amp;gt; Ross
Joey[&#39;ID&#39;] ==&amp;gt; 0987654321
Joey[&#39;Money&#39;] ==&amp;gt; 222.30
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;updating-elements-in-a-list&#34;&gt;Updating Elements in a List&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;To update how much money someone has in their account, you use the same indexing structure. For example:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Ross[&#39;Money&#39;] = 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;while-loops&#34;&gt;While Loops&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Last module, we learned about For loops. This week, we will learn about While loops.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;x = 10
while (x &amp;gt; 0):
	print x
	x -= 1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;What do you think the line above code above will print?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;x = 10
while (x &amp;gt; 0):
	print x
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How about now? What will this modified code print?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;activity-you-are-the-banker&#34;&gt;Activity - You are the banker&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You are a banker at the biggest bank in the country. 6 friends come up to you and ask you to update various items relating to their accounts. Please
help them. Each bank account is a dictionary that looks like the following:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Ross = {&#39;Name&#39;: &#39;Ross&#39;, &#39;ID&#39;: 1234567890, &#39;Checking&#39;: 4000.00, &#39;Savings&#39;: 2200.89}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Activity Steps&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git clone https://github.com/icodecamp/module5_banking.git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cd module5_banking&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run: python banking.py.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Follow the directions that the script tells you&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Keep Learning</title>
      <link>https://icodecamp.github.io/lessons/7-additional-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/7-additional-resources/</guid>
      <description>

&lt;h1 id=&#34;github-command-line&#34;&gt;GitHub/ Command Line&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecademy.com/learn/learn-the-command-line&#34;&gt;&lt;strong&gt;Interactive Command Line Tutorial&lt;/strong&gt;&lt;/a&gt;. Stuck? &lt;a href=&#34;https://www.youtube.com/watch?v=iDbwYI4qntw&#34;&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.codecademy.com/learn/learn-git&#34;&gt;&lt;strong&gt;Interactive Github Tutorial&lt;/strong&gt;&lt;/a&gt;. Stuck? &lt;a href=&#34;https://www.youtube.com/watch?v=TlsLj0jE8e0&#34;&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;python&#34;&gt;Python&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecademy.com/tracks/python&#34;&gt;&lt;strong&gt;Interactive Python Tutorial&lt;/strong&gt;&lt;/a&gt;. Stuck? &lt;a href=&#34;https://www.youtube.com/watch?v=2dmBp5RydwE&amp;amp;list=PL-J2q3Ga50oOM14s1fbxVVjRA3zZR14cR&#34;&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basic Tutorial on Python and setting it up on your own machine&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/LaleTNnNFVE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;h1 id=&#34;web-programming&#34;&gt;Web Programming&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecademy.com/learn/learn-html-css&#34;&gt;&lt;strong&gt;Interactive HTML and CSS Tutorial&lt;/strong&gt;&lt;/a&gt;. Stuck? &lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEKkZrJ3NV8EdSA2vcdiU5udHVVbBve0&#34;&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dash.generalassemb.ly/&#34;&gt;&lt;strong&gt;General Assembly&lt;/strong&gt;&lt;/a&gt; has numerous tutorial on creating reponsive websites and web games.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-OcUaGPkBX4&amp;amp;feature=youtu.be&#34;&gt;&lt;strong&gt;Launch your own Website&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/OcUaGPkBX4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;h1 id=&#34;khan-academy&#34;&gt;Khan Academy&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.khanacademy.org/computing/computer-programming&#34;&gt;&lt;strong&gt;Khan Academy&lt;/strong&gt;&lt;/a&gt; has video tutorials with guided execises. Learn javascript and web programming through fun projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;what-about-the-gift-adruinos&#34;&gt;What about the Gift? Adruinos!&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elegoo.com/download/&#34;&gt;&lt;strong&gt;Starter Kit Guide&lt;/strong&gt;&lt;/a&gt; download Elegoo UNO R3 Project Basic Starter Kit Guide. Step by step guide to help you download the proper software and do fun projects with your arduino.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/CqrQmQqpHXc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Recap</title>
      <link>https://icodecamp.github.io/lessons/6-recap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://icodecamp.github.io/lessons/6-recap/</guid>
      <description>

&lt;h1 id=&#34;goals-recap&#34;&gt;Goals/Recap&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Introduction to programming environment&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;What is Github.&lt;/li&gt;
&lt;li&gt;How to clone a repo from Github&lt;/li&gt;
&lt;li&gt;How to do basic command line operations (create a file, enter a directory, etc)&lt;/li&gt;
&lt;li&gt;Launch the python shell.&lt;/li&gt;
&lt;li&gt;Using Sublime Text&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get familiar with programming concepts&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;What a programming language is&lt;/li&gt;
&lt;li&gt;Variables and functions -&amp;gt; Launch google search&lt;/li&gt;
&lt;li&gt;Conditional Statements -&amp;gt; Snake Game&lt;/li&gt;
&lt;li&gt;Lists and Loops -&amp;gt; Image manipulation&lt;/li&gt;
&lt;li&gt;Dictionaries and Loops -&amp;gt; Banker game&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove fear so you can continue learning on your own&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;why-you-should-care&#34;&gt;Why you should care?&lt;/h1&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/nKIu9yen5nc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>